{{define "echo_module" -}}
package {{.PkgName}}
{{- $data := .}}

import (
    "fmt"
    "net/http"
    "encoding/json"

    "github.com/ezbuy/utils/httputils/echoutils"
    "gopkg.in/labstack/echo.v1"
)

{{template "include" . }}

var _ json.Unmarshaler
var _ echo.Context
var _ = http.StatusOK
var _ = echoutils.OKMessage
var _ = fmt.Sprintf("okay")

const WebApiPrefix = "{{.WebApiPrefix}}"

{{- $serviceList := .Services }}
{{- range $service := $serviceList }}
{{- $serviceName := $data.UpperHead $service.Name }}

type IBase{{$serviceName}}Error interface {
	httpStatusCode() int
	message()        string
}

type base{{$serviceName}}Error struct {
	_httpStatusCode int
	_message        string
}

func (b *base{{$serviceName}}Error) Error() string {
	return fmt.Sprintf("%d %s", b.httpStatusCode, b.message)
}

func (b *base{{$serviceName}}Error) httpStatusCode() int {
	return b._httpStatusCode
}

func (b *base{{$serviceName}}Error) message() string {
	return b._message
}

func NewBase{{$serviceName}}Error(code int, message string) *base{{$serviceName}}Error {
	return &base{{$serviceName}}Error{
		_httpStatusCode: code,
		_message:        message,
	}
}

{{- range $method := $service.Methods}}
{{- $methodName := $data.UpperHead $method.Name }}

{{- $noReturn := $data.IsNilType $method.ReturnType}}
type EchoResponse{{$serviceName}}Service{{$methodName}} struct {
    {{if not $noReturn}}Result {{$data.GenTypeString "echo response result" $method.ReturnType nil false}} `thrift:"0,required" json:"result"`{{end}}
    {{- range $exception := $method.Exceptions}}
    {{$data.UpperHead $exception.Name}} {{$data.GenTypeString $exception.Name $exception.Type nil $exception.Optional}} `thrift:"{{$data.FieldTagThrift $exception}}" json:"{{$data.FieldTagJson $exception}}"`
    {{- end}}
    HTTPError *echo.HTTPError `thrift:"-" json:"-"`
}

{{- end}}

type Echo{{$serviceName}}Service interface {
    {{- range $method := $service.Methods}}
    {{- $methodName := $data.UpperHead $method.Name}}
    {{$methodName}}(c *echo.Context, resp *EchoResponse{{$serviceName}}Service{{$methodName}}, {{$data.GenServiceMethodArguments $method.Arguments}}) error
    {{- end}}
}

func Register{{$serviceName}}ServiceAPIModule(mux *echo.Group, service Echo{{$serviceName}}Service) {
    mod := &{{$serviceName}}ServiceAPIModule{
        service: service,
    }

    group := mux.Group("/{{$serviceName}}")
    {{- range $method := $service.Methods}}
    {{- $methodName := $data.UpperHead $method.Name }}
    group.Post("/{{$methodName}}", mod.{{$methodName}})
    {{- end}}
    group.Get("/health/ping", mod.healthPing)
}

type {{$serviceName}}ServiceAPIModule struct {
    service Echo{{$serviceName}}Service
}

{{- range $method := $service.Methods}}
{{- $methodName := $data.UpperHead $method.Name}}
{{- $noReturn := $data.IsNilType $method.ReturnType}}
func (this *{{$serviceName}}ServiceAPIModule) {{$methodName}}(c *echo.Context) error {
    {{- $argsCount := len $method.Arguments}}
    {{- if ne $argsCount 0}}
    params := &{{$data.MethodRequestName $serviceName $methodName}}{}

    if err := echoutils.DecodeJSONInput(c, params); err != nil {
        return err
    }

    {{- if $data.ValidateParams}}
    {{- range $arg := $method.Arguments}}
    {{if $data.IsStruct $arg.Type}}
    if valid := params.{{$data.UpperHead $arg.Name}}.Valid(); valid == false {
        return echo.NewHTTPError(http.StatusBadRequest, "one or more required fields in {{$arg.Name}} not found")
    }
    {{- end}}
    {{- end}}
    {{- end}}
    {{end}}

    resp := &EchoResponse{{$serviceName}}Service{{$methodName}}{}
    err := this.service.{{$methodName}}(c, resp, {{$data.GenWebApiServiceParams $method.Arguments}})
    
    if err != nil {
        switch err := err.(type) {
        {{- range $exception := $method.Exceptions}}
        case {{$data.GenTypeString $exception.Name $exception.Type nil $exception.Optional}}:
            return c.JSON(http.StatusOK, err)
        {{end}}

        case IBase{{$serviceName}}Error:
            baseError := err.(IBase{{$serviceName}}Error)
            return c.String(baseError.httpStatusCode(), baseError.message())

        default:
            echoutils.RequestLogger(c).Infof("service error: %s", err)
            return echoutils.InternalError
        }
    }

    if resp.HTTPError != nil {
        return resp.HTTPError
    }

    return c.JSON(http.StatusOK, {{if not $noReturn}}resp.Result{{else}}echoutils.OKMessage{{end}})
}
{{- end}}

func (this *{{$serviceName}}ServiceAPIModule) healthPing(c *echo.Context) error {
    return c.JSON(http.StatusOK, "{{$serviceName}}")
}

{{- end}}
{{- end}}
