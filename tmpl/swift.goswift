/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

import Foundation
{{ $st := . }}
// structs
{{ range $k, $v := $.Thrift.Structs }}
class {{ $k }}: EZObject {
{{range $v.Fields}}
    var {{.Name}}: {{.Type | $st.TypecastWithDefaultValue}}
{{end}}
    override var allKeys: Set<String> {
        return [{{ range $i, $p := $v.Fields }}{{ if ne $i 0 }}, {{ end }}"{{ $p.Name }}"{{ end }}]
    }

    override func fromJSON(jsonObject: AnyObject?) -> Bool {
        guard super.fromJSON(jsonObject) else { return false }

        guard let dict = jsonObject as? [String: AnyObject] else { return false }
{{ range $v.Fields }}
        {{ $t := .Type | $st.PlainType }}
{{- if eq $t "String" -}}
        {{ .Name }} = dict["{{ .Name }}"] as? {{ $t }}
{{- else if or (eq $t "Int") (eq $t "Int64") -}}
        {{ .Name }} = dict["{{ .Name }}"] as? {{ $t }} ?? 0
{{- else if eq $t "Double" -}}
        {{ .Name }} = dict["{{ .Name }}"] as? {{ $t }} ?? 0.0
{{- else if eq $t "Bool" -}}
        {{ .Name }} = dict["{{ .Name }}"] as? {{ $t }} ?? false
{{- else if eq .Type.Name "map" -}}
        {{ .Name }} = dict["{{ .Name }}"] as? {{ $t }}
{{- else -}}
        {{ .Name }} = {{ $t }}(jsonObject: dict["{{ .Name }}"])
{{ end }}
{{- end }}
        return true
    }

    override func toJSON() -> AnyObject {
        var dict = [String: AnyObject]()
{{ range $v.Fields }}
        {{ $t := .Type | $st.PlainType }}
{{- if eq $t "Int64" -}}
        dict["{{ .Name }}"] = NSNumber(longLong: {{ .Name }})
{{- else if or (eq $t "String") (eq $t "Int") (eq $t "Bool") (eq $t "Double") -}}
        dict["{{ .Name }}"] = {{ .Name }}
{{- else if eq .Type.Name "map" -}}
        dict["{{ .Name }}"] = {{ .Name }}
{{- else -}}
        dict["{{ .Name }}"] = {{ .Name }}?.toJSON()
{{ end }}
{{- end }}
        return dict
    }

}
{{ end }}
// services
{{ range $k, $v := $.Thrift.Services }}
class {{ $k }}: {{ if $v.Extends }}{{ $v.Extends | $st.LastComponentOfDotStr }}{{ else }}NSObject{{ end }} {
{{ range $v.Methods }}
    class func {{ .Name }}({{ if .Arguments }}{{ .Arguments | $st.ParamsJoinedByComma }}, {{ end }}success: ({{ if .ReturnType }}{{ .ReturnType | $st.PlainType }}{{ else }}Void{{ end }}) -> Void, failure: ((NSError) -> Void)? = nil) {{ if .ReturnType }}-> {{ .ReturnType | $st.TypecastWithoutDefaultValue }} {{ end }}{
        {{ if .Arguments -}}
        var params = [String: AnyObject]()
        {{- range .Arguments -}}
        {{- $t := .Type | $st.PlainType -}}
        {{- if eq $t "Int64" }}
        params["{{ .Name }}"] = NSNumber(longLong: {{ .Name }})
        {{- else if or (eq $t "String") (eq $t "Int") (eq $t "Bool") (eq $t "Double") }}
        params["{{ .Name }}"] = {{ .Name }}
        {{- else if eq .Type.Name "map" }}
        params["{{ .Name }}"] = {{ .Name }}
        {{- else }}
        params["{{ .Name }}"] = {{ .Name }}?.toJSON()
        {{- end }}
        {{- end }}
{{ else -}}
        let params = [String: AnyObject]()
        {{- end }}
        let api = "{{ $k }}.{{ .Name }}"

        debugPrint("api", " req: ", params)

        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            debugPrint(api, " resp: ", responseObject);
{{ if .ReturnType }}

            {{- $t := .ReturnType | $st.PlainType -}}

            {{- if eq $t "String" }}
            success(responseObject as? {{ $t }} ?? "")
            {{- else if or (eq $t "Int") (eq $t "Int64") }}
            success(responseObject as? {{ $t }} ?? 0)
            {{- else if eq $t "Double" }}
            success(responseObject as? {{ $t }} ?? 0.0)
            {{- else if eq $t "Bool" }}
            success(responseObject as? {{ $t }} ?? false)
            {{- else if eq .ReturnType.Name "map" }}
            success(responseObject as! {{ $t }})
            {{- else if eq .ReturnType.Name "list" }}
            success({{ $t }}(jsonObject: responseObject) ?? [])
            {{- else }}
            success({{ $t }}(jsonObject: responseObject)!)
            {{- end -}}

            {{ else }}
            success()
{{- end }}
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
{{ end }}
}
{{ end }}
