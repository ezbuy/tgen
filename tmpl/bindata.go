// Code generated by go-bindata.
// sources:
// tmpl/swift.goswift
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplSwiftGoswift = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5d\x6f\xdb\x36\x17\xbe\xf7\xaf\x38\x11\x7c\x21\x01\xb6\x9a\x8b\x17\xef\x85\xd7\xc4\x48\x93\x14\x58\xb6\x39\x41\x3c\x74\xc0\x82\x5c\x30\x16\xed\xb2\x91\x49\x97\xa2\xbc\x05\xae\xff\xfb\x0e\x3f\x24\x51\xb2\xe4\xd4\xce\x0a\x4c\x37\xf5\x91\x78\x9e\xe7\x21\x79\xbe\x1a\xb6\x5c\x09\xa9\xe0\xa3\xc8\x79\x42\x14\x13\xbc\xf7\xfe\x64\x38\x84\x4c\xc9\x7c\xa6\x32\x18\x0e\xcf\x7b\xef\xde\x15\x66\x6f\xb3\x01\x49\xf8\x82\x42\xff\x79\x00\xfd\x35\x8c\xce\xa0\x1f\x4f\xdd\xda\xed\xb6\x37\x4b\x49\x96\x01\xae\xea\x3f\xa3\x39\x82\xeb\x3f\x6f\x9f\xbe\xd0\x99\x82\x4d\x0f\xf0\xa9\xdc\xd7\xf1\x47\x46\xd3\xc4\x38\xe9\x2f\x6b\x22\xf5\xd7\x78\x42\x96\xd4\x78\x6a\xe3\xf7\x97\x15\x85\x6f\xa0\xf0\x9f\x19\xc9\xd4\x1f\x4c\x7d\xbe\xa2\x73\x92\xa7\xea\x13\x49\x73\x5a\xf8\xe2\x52\xca\x93\xc2\x12\x6b\x2a\x25\x4b\xa8\x81\x24\x69\xfa\x0b\x7d\xc9\x46\x30\xa5\xea\x3d\xea\x64\x7c\x71\xee\xb4\xe8\x47\x52\x95\x4b\x0e\x0f\x95\x2e\x86\xdb\x5a\x99\x6d\x79\x0a\xf1\x33\x9b\x03\xd7\x9f\xe1\x14\xed\x41\x45\x19\xe8\xbd\xae\x0a\xd9\x41\xf9\xfe\xd1\x70\x6c\x7b\x75\x49\xf3\x9c\xcf\x60\x2e\xc5\xf2\x66\x7a\x3b\x09\xbf\x64\x82\xdb\xe3\x19\xc1\x05\x7f\xb1\x3f\xc7\x11\x0c\xcf\xe1\x83\x10\xa9\xa7\x73\x91\x13\x99\x40\x96\xaf\xa8\x8c\x5b\xdc\x23\xa0\x69\x46\x61\x53\xec\x67\x4e\xb4\xe9\xc8\x2b\xff\x94\x2a\x48\x18\x5e\xc6\x19\x54\xbe\x40\xb2\x31\x3c\xd8\xa3\xf1\x64\x3c\x76\x40\x16\x88\x2d\x37\x39\xdc\x7a\x8c\x9b\xcd\x10\xfa\x4a\x1f\x64\x71\x8b\xab\x94\x30\x6e\x7e\xef\x2c\xc4\xc3\xa5\x5f\xf5\xf2\xc0\xea\x08\x8a\xbb\x74\x4c\xc5\xf1\xa2\x70\xad\xff\x21\xf0\xde\x05\x8f\x66\x07\xfa\x1a\x54\xdd\x6d\x68\xb7\x80\xe0\x42\x42\xe8\x08\x7e\xe6\x2a\x88\x7c\xeb\xff\xff\x43\xfb\x68\x3a\x18\x8f\xe1\xb4\x95\xd3\x31\x5c\x89\xfc\x29\xa5\x6f\xd8\x90\x61\x88\xf7\x72\xe8\x60\x79\x23\x83\xb9\xde\x2e\x0e\x73\x83\xd6\x39\x58\x92\xd5\xbf\x7a\x3b\x9d\x50\x85\x4b\x2d\x4b\x5a\xf0\xa3\x3a\xa6\xad\x03\x7b\xdf\xb9\x88\xc6\xa2\x45\xbb\x93\x54\x09\x93\x63\x26\x19\xcb\xa4\xf0\x32\x52\x17\x17\x97\x4b\x2d\xc9\x13\x46\x3f\x3a\x51\x6c\xe4\xfa\xc7\xd7\x76\xf6\x67\x30\x99\x4e\xf2\xe5\x13\x95\x61\x2a\xf8\xe2\x57\xa1\x65\x7a\x4b\xa2\xd7\xd2\xc5\xe5\x63\xd4\x91\x3f\x26\xf2\x2a\xd3\x05\x7b\xf4\xba\x2c\xcf\x3e\x26\xea\x8e\x00\x3d\xc4\x7b\x1c\x17\xd7\x7f\x6c\x70\x69\x0a\x17\x5c\xdb\x5e\xd5\x9f\x5c\x6f\xa5\x72\xcd\x66\xb4\x6a\xae\xce\xee\xe8\xae\xc5\xea\x96\xf6\x6a\x1b\x13\x46\xd6\xf5\xdf\x0a\x29\x5c\xaf\xf2\xec\x6f\x80\x1e\xea\x52\x60\x93\xe7\x94\xab\xdb\xf9\x95\x50\x78\xa7\x76\x9d\x3b\x97\xc9\xd4\x46\x6d\x29\xb3\xa5\x59\xff\x46\xd5\x67\x51\x75\x6b\xab\xc3\x24\x8a\x77\x6c\xa1\x95\x13\x5f\xc8\x45\xbe\x44\x36\x27\xc7\xb3\x31\xb8\x89\x24\xcb\xec\x46\x30\x4e\x93\x0f\x2f\x28\x6c\x49\xea\x0d\x35\xcb\x67\xb8\x59\xec\xd8\x05\xda\xbd\x39\x51\x93\x0f\x16\xce\x7b\xe1\x27\x8b\xbf\xa5\x4f\x82\x25\x25\xa2\xc9\x61\xfd\x66\x80\x65\x8e\xa5\xb9\xa4\x08\x1e\x4e\xa6\xd7\x52\x0a\x59\x7e\x8c\xc6\x18\x03\x9c\xa5\x11\xb4\xf1\xe2\xa2\x1d\x6a\x7f\x2c\x11\xb9\x6a\x4c\x26\xd5\x8e\x36\xcd\x14\xae\x1d\x50\xad\xa2\xd8\xd3\xf9\xfe\x9a\xe2\x21\xfd\x98\xa2\x62\x05\xfd\x07\xcb\x4a\x97\xb0\x37\x16\x96\xa3\x60\x0f\xf3\x3f\xbc\xb8\x78\xd7\xde\xe4\xd3\x23\xdd\x77\x07\xcd\x0e\xa0\xf6\x26\x2b\x86\xae\x41\x51\x53\x62\x5f\x79\xa5\x26\xa1\x4f\xf9\xe2\x0e\xd1\x55\x18\xa0\x47\x30\x80\x00\x4b\xdd\xd7\x11\xe0\x2f\xcb\x1f\x55\x8b\x2f\x24\x25\xae\x6a\xc5\xb3\x5c\x4a\x8c\xcf\x71\x7c\x33\xbd\xbf\x9d\xdc\xdd\x5f\x5e\xa6\x0c\xed\x98\xf1\xb5\x78\xa6\xb6\xac\x84\x88\x38\x80\xbf\x30\x8d\xee\x34\x14\x55\x54\x62\xfe\x5b\xd8\x01\x94\x05\x61\x03\xa1\xc0\x01\xd8\xfc\x27\x65\x80\xec\x19\xd6\xb4\x8c\x16\x13\xb0\x4b\x63\x60\xbc\xd4\xd1\x10\x6e\x58\x02\xe3\x68\x74\x37\x10\x7e\xaa\xf9\xb5\x15\x81\x5e\x63\x45\x99\x63\x1d\x15\x69\xd8\xe6\xb2\x77\xd6\xd5\x8f\xdb\x6f\x58\x97\xb7\x33\xb1\x05\x41\xb4\x83\x7d\xcc\xbc\x7b\x00\xe5\x69\x37\x63\xf7\xb4\x7b\x08\x7e\xfc\x3a\xc3\xce\xac\x7b\x00\xbe\x19\x72\xf7\x32\x78\x37\xd9\x51\x20\xf6\xd2\x9d\x94\x74\x07\xb2\xa4\x2c\x53\x9d\x34\xad\x93\x70\x33\xfc\x71\x7b\x0f\x8f\x1d\xac\x6f\xc0\x3d\x69\x81\xc4\x1a\xd2\x12\xd9\x7b\xa9\xda\x51\x1a\x8b\xb7\x5e\x7f\xae\xe7\x3a\xad\x75\xea\x66\x8a\xeb\xc7\x39\x8e\x43\xbb\xb4\xfc\xee\x2e\xa2\xf9\x77\x02\x7f\x26\xfb\x27\x00\x00\xff\xff\xe3\x2f\x62\xa1\x01\x11\x00\x00")

func tmplSwiftGoswiftBytes() ([]byte, error) {
	return bindataRead(
		_tmplSwiftGoswift,
		"tmpl/swift.goswift",
	)
}

func tmplSwiftGoswift() (*asset, error) {
	bytes, err := tmplSwiftGoswiftBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/swift.goswift", size: 4353, mode: os.FileMode(420), modTime: time.Unix(1456391890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/swift.goswift": tmplSwiftGoswift,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"swift.goswift": &bintree{tmplSwiftGoswift, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
